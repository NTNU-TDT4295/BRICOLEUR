// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "videoportal.h"

/////////////////////////////////////////////////////////////////////////////
// CVideoPortal

IMPLEMENT_DYNCREATE(CVideoPortal, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CVideoPortal properties

/////////////////////////////////////////////////////////////////////////////
// CVideoPortal operations

long CVideoPortal::PrepareControl(LPCTSTR strUniqueName, LPCTSTR strRegistryKey, long lFlags)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_I4;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		strUniqueName, strRegistryKey, lFlags);
	return result;
}

long CVideoPortal::GetCameraCount(long* plCount)
{
	long result;
	static BYTE parms[] =
		VTS_PI4;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		plCount);
	return result;
}

long CVideoPortal::GetCameraDescription(long lIndex, BSTR* strDescription)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_PBSTR;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lIndex, strDescription);
	return result;
}

long CVideoPortal::GetCameraType(long lIndex, long* lCameraType)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_PI4;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lIndex, lCameraType);
	return result;
}

long CVideoPortal::QueryCameraConnected(long lIndex, long* bConnected)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_PI4;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lIndex, bConnected);
	return result;
}

long CVideoPortal::QueryRegistryCameraIndex(long* lIndex)
{
	long result;
	static BYTE parms[] =
		VTS_PI4;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lIndex);
	return result;
}

long CVideoPortal::GetCameraState(long lIndex, long* plCameraState)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_PI4;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lIndex, plCameraState);
	return result;
}

long CVideoPortal::ConnectCamera(long lIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lIndex);
	return result;
}

long CVideoPortal::ConnectCamera2()
{
	long result;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CVideoPortal::DisconnectCamera()
{
	long result;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CVideoPortal::LoadRegistrySettings(LPCTSTR strRegistryKey)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		strRegistryKey);
	return result;
}

long CVideoPortal::SaveRegistrySettings(LPCTSTR strRegistryKey)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		strRegistryKey);
	return result;
}

long CVideoPortal::SetCameraPropertyLong(long lProperty, long lPropertyValue)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lProperty, lPropertyValue);
	return result;
}

long CVideoPortal::GetCameraPropertyLong(long lProperty, long* plPropertyValue)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_PI4;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lProperty, plPropertyValue);
	return result;
}

long CVideoPortal::PictureToFile(long lFormatFourCC, long lBitDepth, LPCTSTR strFileName, LPCTSTR strTextStamp)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BSTR VTS_BSTR;
	InvokeHelper(0xf, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lFormatFourCC, lBitDepth, strFileName, strTextStamp);
	return result;
}

long CVideoPortal::PictureToMemory(long lFormatFourCC, long lBitDepth, long lMemory, long* plMemorySize, LPCTSTR strTextStamp)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_PI4 VTS_BSTR;
	InvokeHelper(0x10, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lFormatFourCC, lBitDepth, lMemory, plMemorySize, strTextStamp);
	return result;
}

long CVideoPortal::StartMovieRecording(LPCTSTR strFileName, LPCTSTR strTextStamp)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x11, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		strFileName, strTextStamp);
	return result;
}

long CVideoPortal::StopMovieRecording()
{
	long result;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CVideoPortal::StepCaptureAddFrame()
{
	long result;
	InvokeHelper(0x13, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CVideoPortal::MovieRecordWriteSingleFrame(LPCTSTR strFileName, LPCTSTR strTextStamp)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		strFileName, strTextStamp);
	return result;
}

void CVideoPortal::GetLastError(long* plError)
{
	static BYTE parms[] =
		VTS_PI4;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 plError);
}

long CVideoPortal::SetVideoFormat(long lWidth, long lHeight, long lBitDepth, long lFormatFourCC)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x16, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lWidth, lHeight, lBitDepth, lFormatFourCC);
	return result;
}

long CVideoPortal::GetVideoFormat(long* plWidth, long* plHeight, long* plBitDepth, long* lFormatFourCC)
{
	long result;
	static BYTE parms[] =
		VTS_PI4 VTS_PI4 VTS_PI4 VTS_PI4;
	InvokeHelper(0x17, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		plWidth, plHeight, plBitDepth, lFormatFourCC);
	return result;
}

long CVideoPortal::ShowCameraDlg(long lCameraDlg)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lCameraDlg);
	return result;
}

long CVideoPortal::EnableUIElements(long lElement, long lFlags, long lEnable)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x19, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lElement, lFlags, lEnable);
	return result;
}

long CVideoPortal::StartVideoHook(long lFlag)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1a, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lFlag);
	return result;
}

long CVideoPortal::StopVideoHook(long lFlag)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1b, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lFlag);
	return result;
}

long CVideoPortal::GetInternalPictureCount(long* plCount)
{
	long result;
	static BYTE parms[] =
		VTS_PI4;
	InvokeHelper(0x1c, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		plCount);
	return result;
}

long CVideoPortal::QueryInternalPictureInfo(long lIndex, long* plImageWidth, long* plImageHeight, long* plThumbnailWidth, long* plThumbnailHeight, long* plTime)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_PI4 VTS_PI4 VTS_PI4 VTS_PI4 VTS_PI4;
	InvokeHelper(0x1d, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lIndex, plImageWidth, plImageHeight, plThumbnailWidth, plThumbnailHeight, plTime);
	return result;
}

long CVideoPortal::InternalPictureToDisk(long lIndex, long lType, long lFormatFourCC, long lBitDepth, LPCTSTR strFileName, LPCTSTR strTextStamp)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_BSTR VTS_BSTR;
	InvokeHelper(0x1e, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lIndex, lType, lFormatFourCC, lBitDepth, strFileName, strTextStamp);
	return result;
}

long CVideoPortal::InternalPictureToMemory(long lIndex, long lType, long lFormatFourCC, long lBitDepth, long lMemory, long* plMemorySize, LPCTSTR strTextStamp)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_PI4 VTS_BSTR;
	InvokeHelper(0x1f, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lIndex, lType, lFormatFourCC, lBitDepth, lMemory, plMemorySize, strTextStamp);
	return result;
}

long CVideoPortal::DeleteAllInternalPictures()
{
	long result;
	InvokeHelper(0x20, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CVideoPortal::DeleteLastInternalPicture()
{
	long result;
	InvokeHelper(0x21, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CVideoPortal::DeleteInternalPicture(long lIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x22, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lIndex);
	return result;
}

long CVideoPortal::SendCommand(long lCommand, long lSubCommand, long lFlags, long lParam, long lParamSize, long plParam2, long lParamSize2)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x23, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lCommand, lSubCommand, lFlags, lParam, lParamSize, plParam2, lParamSize2);
	return result;
}

long CVideoPortal::Query(long lCommand, long lSubCommand, long lFlags, long lParam, long lParamSize, long lParam2, long lParamSize2)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x24, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lCommand, lSubCommand, lFlags, lParam, lParamSize, lParam2, lParamSize2);
	return result;
}

long CVideoPortal::GetCameraConnected()
{
	long result;
	InvokeHelper(0x25, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CVideoPortal::GetCameraIndex()
{
	long result;
	InvokeHelper(0x26, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString CVideoPortal::GetPictureSound()
{
	CString result;
	InvokeHelper(0x27, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CVideoPortal::SetPictureSound(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x27, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

unsigned long CVideoPortal::GetStampTextColor()
{
	unsigned long result;
	InvokeHelper(0x28, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CVideoPortal::SetStampTextColor(unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x28, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

CString CVideoPortal::GetStampFontName()
{
	CString result;
	InvokeHelper(0x29, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CVideoPortal::SetStampFontName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x29, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

long CVideoPortal::GetStampPointSize()
{
	long result;
	InvokeHelper(0x2a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CVideoPortal::SetStampPointSize(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CVideoPortal::GetStampTextShadow()
{
	long result;
	InvokeHelper(0x2b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CVideoPortal::SetStampTextShadow(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

unsigned long CVideoPortal::GetStampTextShadowColor()
{
	unsigned long result;
	InvokeHelper(0x2c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CVideoPortal::SetStampTextShadowColor(unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

long CVideoPortal::GetStampTransparentBackground()
{
	long result;
	InvokeHelper(0x2d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CVideoPortal::SetStampTransparentBackground(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

unsigned long CVideoPortal::GetStampBackgroundColor()
{
	unsigned long result;
	InvokeHelper(0x2e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CVideoPortal::SetStampBackgroundColor(unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

long CVideoPortal::GetEnablePreview()
{
	long result;
	InvokeHelper(0x2f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CVideoPortal::SetEnablePreview(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CVideoPortal::GetMovieVideoCompressionFOURCC()
{
	long result;
	InvokeHelper(0x30, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CVideoPortal::SetMovieVideoCompressionFOURCC(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x30, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CVideoPortal::GetMovieVideoCompressionKeyFrameInterval()
{
	long result;
	InvokeHelper(0x31, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CVideoPortal::SetMovieVideoCompressionKeyFrameInterval(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x31, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CVideoPortal::GetMovieVideoCompressionQuality()
{
	long result;
	InvokeHelper(0x32, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CVideoPortal::SetMovieVideoCompressionQuality(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x32, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CVideoPortal::GetMoviePlaybackFPS()
{
	long result;
	InvokeHelper(0x33, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CVideoPortal::SetMoviePlaybackFPS(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x33, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CVideoPortal::GetMovieAudioSamplesPerSecond()
{
	long result;
	InvokeHelper(0x34, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CVideoPortal::SetMovieAudioSamplesPerSecond(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x34, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CVideoPortal::GetMovieAudioChannels()
{
	long result;
	InvokeHelper(0x35, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CVideoPortal::SetMovieAudioChannels(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x35, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CVideoPortal::GetMovieAudioBitsPerSample()
{
	long result;
	InvokeHelper(0x36, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CVideoPortal::SetMovieAudioBitsPerSample(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x36, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CVideoPortal::GetMovieAudioCompressionFOURCC()
{
	long result;
	InvokeHelper(0x37, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CVideoPortal::SetMovieAudioCompressionFOURCC(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x37, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CVideoPortal::GetMovieAudioCompressionQuality()
{
	long result;
	InvokeHelper(0x38, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CVideoPortal::SetMovieAudioCompressionQuality(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x38, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CVideoPortal::GetMovieRecordAudio()
{
	long result;
	InvokeHelper(0x39, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CVideoPortal::SetMovieRecordAudio(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x39, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CVideoPortal::GetMovieRecordMode()
{
	long result;
	InvokeHelper(0x3a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CVideoPortal::SetMovieRecordMode(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CVideoPortal::GetMovieCreateFlags()
{
	long result;
	InvokeHelper(0x3b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CVideoPortal::SetMovieCreateFlags(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CVideoPortal::GetMovieRecordingActiveLocal()
{
	long result;
	InvokeHelper(0x3c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CVideoPortal::GetMovieRecordingActiveGlobal()
{
	long result;
	InvokeHelper(0x3d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CVideoPortal::GetCameraState()
{
	long result;
	InvokeHelper(0x3e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CVideoPortal::GetEnableMovieRecordErrorPrompt()
{
	long result;
	InvokeHelper(0x3f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CVideoPortal::SetEnableMovieRecordErrorPrompt(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CVideoPortal::GetEnablePictureDiskErrorPrompt()
{
	long result;
	InvokeHelper(0x40, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CVideoPortal::SetEnablePictureDiskErrorPrompt(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x40, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void CVideoPortal::SetStatusBarText(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x41, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

long CVideoPortal::GetPreviewMaxWidth()
{
	long result;
	InvokeHelper(0x42, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CVideoPortal::SetPreviewMaxWidth(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x42, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CVideoPortal::GetPreviewMaxHeight()
{
	long result;
	InvokeHelper(0x43, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CVideoPortal::SetPreviewMaxHeight(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x43, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CVideoPortal::GetVideoHookStateGlobal()
{
	long result;
	InvokeHelper(0x44, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CVideoPortal::GetVideoHookStateLocal()
{
	long result;
	InvokeHelper(0x45, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CVideoPortal::GetInternalPictureSupport()
{
	long result;
	InvokeHelper(0x46, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CVideoPortal::GetInternalThumbnailSupport()
{
	long result;
	InvokeHelper(0x47, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}
