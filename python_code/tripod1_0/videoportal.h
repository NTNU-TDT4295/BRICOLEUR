#if !defined(AFX_VIDEOPORTAL_H__81028C4C_DE77_11D5_B703_00C04F04A1F3__INCLUDED_)
#define AFX_VIDEOPORTAL_H__81028C4C_DE77_11D5_B703_00C04F04A1F3__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CVideoPortal wrapper class

class CVideoPortal : public CWnd
{
protected:
	DECLARE_DYNCREATE(CVideoPortal)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x102225e5, 0xea25, 0x11d3, { 0x88, 0x6e, 0x0, 0x10, 0x5a, 0x15, 0x4a, 0x4d } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:

// Operations
public:
	long PrepareControl(LPCTSTR strUniqueName, LPCTSTR strRegistryKey, long lFlags);
	long GetCameraCount(long* plCount);
	long GetCameraDescription(long lIndex, BSTR* strDescription);
	long GetCameraType(long lIndex, long* lCameraType);
	long QueryCameraConnected(long lIndex, long* bConnected);
	long QueryRegistryCameraIndex(long* lIndex);
	long GetCameraState(long lIndex, long* plCameraState);
	long ConnectCamera(long lIndex);
	long ConnectCamera2();
	long DisconnectCamera();
	long LoadRegistrySettings(LPCTSTR strRegistryKey);
	long SaveRegistrySettings(LPCTSTR strRegistryKey);
	long SetCameraPropertyLong(long lProperty, long lPropertyValue);
	long GetCameraPropertyLong(long lProperty, long* plPropertyValue);
	long PictureToFile(long lFormatFourCC, long lBitDepth, LPCTSTR strFileName, LPCTSTR strTextStamp);
	long PictureToMemory(long lFormatFourCC, long lBitDepth, long lMemory, long* plMemorySize, LPCTSTR strTextStamp);
	long StartMovieRecording(LPCTSTR strFileName, LPCTSTR strTextStamp);
	long StopMovieRecording();
	long StepCaptureAddFrame();
	long MovieRecordWriteSingleFrame(LPCTSTR strFileName, LPCTSTR strTextStamp);
	void GetLastError(long* plError);
	long SetVideoFormat(long lWidth, long lHeight, long lBitDepth, long lFormatFourCC);
	long GetVideoFormat(long* plWidth, long* plHeight, long* plBitDepth, long* lFormatFourCC);
	long ShowCameraDlg(long lCameraDlg);
	long EnableUIElements(long lElement, long lFlags, long lEnable);
	long StartVideoHook(long lFlag);
	long StopVideoHook(long lFlag);
	long GetInternalPictureCount(long* plCount);
	long QueryInternalPictureInfo(long lIndex, long* plImageWidth, long* plImageHeight, long* plThumbnailWidth, long* plThumbnailHeight, long* plTime);
	long InternalPictureToDisk(long lIndex, long lType, long lFormatFourCC, long lBitDepth, LPCTSTR strFileName, LPCTSTR strTextStamp);
	long InternalPictureToMemory(long lIndex, long lType, long lFormatFourCC, long lBitDepth, long lMemory, long* plMemorySize, LPCTSTR strTextStamp);
	long DeleteAllInternalPictures();
	long DeleteLastInternalPicture();
	long DeleteInternalPicture(long lIndex);
	long SendCommand(long lCommand, long lSubCommand, long lFlags, long lParam, long lParamSize, long plParam2, long lParamSize2);
	long Query(long lCommand, long lSubCommand, long lFlags, long lParam, long lParamSize, long lParam2, long lParamSize2);
	long GetCameraConnected();
	long GetCameraIndex();
	CString GetPictureSound();
	void SetPictureSound(LPCTSTR lpszNewValue);
	unsigned long GetStampTextColor();
	void SetStampTextColor(unsigned long newValue);
	CString GetStampFontName();
	void SetStampFontName(LPCTSTR lpszNewValue);
	long GetStampPointSize();
	void SetStampPointSize(long nNewValue);
	long GetStampTextShadow();
	void SetStampTextShadow(long nNewValue);
	unsigned long GetStampTextShadowColor();
	void SetStampTextShadowColor(unsigned long newValue);
	long GetStampTransparentBackground();
	void SetStampTransparentBackground(long nNewValue);
	unsigned long GetStampBackgroundColor();
	void SetStampBackgroundColor(unsigned long newValue);
	long GetEnablePreview();
	void SetEnablePreview(long nNewValue);
	long GetMovieVideoCompressionFOURCC();
	void SetMovieVideoCompressionFOURCC(long nNewValue);
	long GetMovieVideoCompressionKeyFrameInterval();
	void SetMovieVideoCompressionKeyFrameInterval(long nNewValue);
	long GetMovieVideoCompressionQuality();
	void SetMovieVideoCompressionQuality(long nNewValue);
	long GetMoviePlaybackFPS();
	void SetMoviePlaybackFPS(long nNewValue);
	long GetMovieAudioSamplesPerSecond();
	void SetMovieAudioSamplesPerSecond(long nNewValue);
	long GetMovieAudioChannels();
	void SetMovieAudioChannels(long nNewValue);
	long GetMovieAudioBitsPerSample();
	void SetMovieAudioBitsPerSample(long nNewValue);
	long GetMovieAudioCompressionFOURCC();
	void SetMovieAudioCompressionFOURCC(long nNewValue);
	long GetMovieAudioCompressionQuality();
	void SetMovieAudioCompressionQuality(long nNewValue);
	long GetMovieRecordAudio();
	void SetMovieRecordAudio(long nNewValue);
	long GetMovieRecordMode();
	void SetMovieRecordMode(long nNewValue);
	long GetMovieCreateFlags();
	void SetMovieCreateFlags(long nNewValue);
	long GetMovieRecordingActiveLocal();
	long GetMovieRecordingActiveGlobal();
	long GetCameraState();
	long GetEnableMovieRecordErrorPrompt();
	void SetEnableMovieRecordErrorPrompt(long nNewValue);
	long GetEnablePictureDiskErrorPrompt();
	void SetEnablePictureDiskErrorPrompt(long nNewValue);
	void SetStatusBarText(LPCTSTR lpszNewValue);
	long GetPreviewMaxWidth();
	void SetPreviewMaxWidth(long nNewValue);
	long GetPreviewMaxHeight();
	void SetPreviewMaxHeight(long nNewValue);
	long GetVideoHookStateGlobal();
	long GetVideoHookStateLocal();
	long GetInternalPictureSupport();
	long GetInternalThumbnailSupport();
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_VIDEOPORTAL_H__81028C4C_DE77_11D5_B703_00C04F04A1F3__INCLUDED_)
