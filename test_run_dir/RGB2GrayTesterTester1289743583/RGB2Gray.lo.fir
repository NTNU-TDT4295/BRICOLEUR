circuit accelerators.RGB2Gray : @[:@2.0]
  module accelerators.RGB2Gray : @[:@3.2]
    input clock : Clock @[:@4.4]
    input reset : UInt<1> @[:@5.4]
    input io_dataIn : UInt<8> @[:@6.4]
    input io_loadingValues : UInt<1> @[:@6.4]
    output io_dataOut : UInt<8> @[:@6.4]
    output io_dataValid : UInt<1> @[:@6.4]
  
    reg v : UInt<8>, clock with :
      reset => (UInt<1>("h0"), v) @[grayscale.scala 19:18:@8.4]
    reg value : UInt<2>, clock with :
      reset => (UInt<1>("h0"), value) @[Counter.scala 26:33:@9.4]
    node _T_19 = add(v, io_dataIn) @[grayscale.scala 27:16:@13.6]
    node _T_20 = tail(_T_19, 1) @[grayscale.scala 27:16:@14.6]
    node _GEN_0 = mux(io_loadingValues, _T_20, v) @[grayscale.scala 26:26:@12.4]
    node _T_22 = eq(value, UInt<2>("h2")) @[Counter.scala 34:24:@17.4]
    node _T_24 = add(value, UInt<1>("h1")) @[Counter.scala 35:22:@18.4]
    node _T_25 = tail(_T_24, 1) @[Counter.scala 35:22:@19.4]
    node _GEN_1 = mux(_T_22, UInt<1>("h0"), _T_25) @[Counter.scala 37:21:@21.4]
    node _T_29 = div(v, UInt<2>("h3")) @[grayscale.scala 32:25:@26.6]
    node _GEN_2 = mux(_T_22, UInt<1>("h1"), UInt<1>("h0")) @[grayscale.scala 30:23:@24.4]
    node _GEN_3 = mux(_T_22, _T_29, UInt<1>("h0")) @[grayscale.scala 30:23:@24.4]
    io_dataOut <= _GEN_3 @[grayscale.scala 23:14:@11.4 grayscale.scala 32:20:@27.6]
    io_dataValid <= _GEN_2 @[grayscale.scala 22:16:@10.4 grayscale.scala 31:22:@25.6]
    v <= mux(reset, UInt<1>("h0"), _GEN_0) @[grayscale.scala 27:11:@15.6]
    value <= mux(reset, UInt<2>("h0"), _GEN_1) @[Counter.scala 35:13:@20.4 Counter.scala 37:29:@22.6]
